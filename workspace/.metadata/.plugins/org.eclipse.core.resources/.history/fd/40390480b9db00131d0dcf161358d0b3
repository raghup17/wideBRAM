/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

void print(char *str);

#define DRAM_BASE 0x20000000
#define BRAM_BASE 0xC0000000

// All in bytes
#define BRAM_DEPTH 32
#define BRAM_WIDTH 8
#define BRAM_SIZE (BRAM_DEPTH*BRAM_WIDTH)

int main()
{
	int i = 0;
	int *dram = (int*)DRAM_BASE;
	int *bram = (int*)BRAM_BASE;
    init_platform();
    init();
    Xil_DCacheDisable();

    printf("BRAM parameters:\n\r");
    printf("Width: %d bytes\n\r", BRAM_WIDTH);
    printf("Depth: %d bytes\n\r", BRAM_DEPTH);
    printf("BRAM fits %d integers\n\r", BRAM_SIZE/sizeof(int));
    for (i=0; i<2*BRAM_SIZE/sizeof(int); i++) {
    	dram[i] = i;
    }

    simpleCopy(bram, dram, 2*BRAM_SIZE);

    for (i=0; i<2*BRAM_SIZE/sizeof(int); i++) {
    	dram[i] = 0;
    }

    simpleCopy(dram, bram, 2*BRAM_SIZE);

    for (i=0; i<2*BRAM_SIZE/sizeof(int); i++) {
    	if (i % 20 == 0) {
    		printf("\n\r");
    	}
    	printf("%d ", dram[i]);
    }
    printf("\n\r");
    return 0;
}
